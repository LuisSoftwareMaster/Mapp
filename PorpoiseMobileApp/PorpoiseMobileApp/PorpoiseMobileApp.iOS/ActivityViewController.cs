﻿// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Threading.Tasks;
using CoreGraphics;
using Foundation;
using MvvmCross.Binding.iOS.Views;
using PorpoiseMobileApp.Converters;
using PorpoiseMobileApp.Models;
using PorpoiseMobileApp.ViewModels;
using UIKit;

namespace PorpoiseMobileApp.iOS
{

    //[HelpAttribute("http://localhost/porpoise")]
    public partial class ActivityViewController : MvvmViewController<ActivityViewModel>
    {

        public const int USER_TAB = 0;

        public const int COMPANY_TAB = 1;

        public HourLog PostId
        {

            get; set;

        }

        public int CurrentNumberOfPosts
        {

            get;

            set;


        }

        /*public UISegmentedControl segmentControl
		{

			get
			{

				return this.ActivitySegmentedControl;

			}

		}*/

        public ActivityViewController(IntPtr handle) : base(handle)
        {

        }

        public void reloadTable()
        {

            this.CompanyActivityTableView.ReloadData();

        }

        public void reloadCompanyTable()
        {

            this.SetupActivitySource();

            this.CompanyActivityTableView.ReloadData();
        }

        private bool showTutorial= true;

        public bool ShowTutorial{

            get{

                return showTutorial;

            }

    set{
                showTutorial = value;

            }

        }

        public  void FlagTutorial(){
            
             ViewModel.FlagTutorial();

        }

		public async override void ViewWillAppear(bool animated)
		{
			//this.Alert(UIAlertActionStyle.Default, Resource.Error, "Please log in", null, null);
			
			//ViewModel.Logout();
			this.NavigationBarSetUp();
			this.styleComponents();

          // this.ShowTutorial =

            if(AccountInfo.show_profile_tutorial){


                LoginTutorialFirst ltf = new LoginTutorialFirst();

                ltf.ParentController = this;

                this.PresentViewController(ltf, false,null);

                AccountInfo.show_profile_tutorial = false;

            }

			//this.View.BackgroundColor = PorpoiseColors.Turquoise;

			
			//Write your code here

			client = new Client.PorpoiseWebApiClient();

            var result = await client.GetEmployee();

			if (result != null && result.Successful)
			{

				Debug.WriteLine("RESULT IS NOT NULL");
				AccountInfo.UserId = result.UserId.Value;
			}
			else
			{

				var user = NSUserDefaults.StandardUserDefaults;
				Debug.WriteLine("Employee is  null");
				user.SetBool(false, "logged");
				AccountInfo.Token = null;
				this.ViewModel.InFlight = true;
				await Task.Delay(1000);
				this.ViewModel.InFlight = false;
				ViewModel.Logout();


			}

			//this.UserActivityTableView.Hidden = true;
			//CompanyActivityTableView.Hidden = true;
			InvokeOnMainThread(() =>
					{
						ViewModel.LoadPosts();
					});



			this.Overlay.SetNeedsLayout();

			this.Overlay.LayoutIfNeeded();

			this.Overlay.LayoutSubviews();

			this.OverlayImage.SetNeedsLayout();

			this.OverlayImage.LayoutIfNeeded();

			this.OverlayImage.LayoutSubviews();

		}



		public override void ViewDidDisappear(bool animated)
		{
			//CompanyActivityTableView.SearchResultsSource = null;
			
			base.ViewDidDisappear(animated);

            CompanyActivityTableView.Delegate = null;
		}





		public override void ViewDidLayoutSubviews()
		{

			//UserActivityTableView.Bounds = UIScreen.MainScreen.Bounds;

			//CompanyActivityTableView.Frame = this.View.Frame;

			//this.View.AutosizesSubviews(true);

			//his.View.AutosizesSubviews = true;

		}
		public override  void ViewDidLoad()
		{
			base.ViewDidLoad();

			Bindings.Bind(Overlay).For(x => x.Hidden).To(x => x.InFlight).WithConversion(new InverseConverter());
			Bindings.Apply();

			client = new Client.PorpoiseWebApiClient();

			this.Overlay.SetNeedsLayout();

			this.Overlay.LayoutIfNeeded();

			this.Overlay.LayoutSubviews();

			this.OverlayImage.SetNeedsLayout();

			this.OverlayImage.LayoutIfNeeded();

			this.OverlayImage.LayoutSubviews();

			InvokeOnMainThread(() =>
				{
					SetupActivitySource();
				});

			//Performs loggedin
			/*client = new Client.PorpoiseWebApiClient();
			var employee = await client.GetEmployee();

			if (employee != null && employee.Successful)
			{
				var user = NSUserDefaults.StandardUserDefaults;
				Debug.WriteLine("Employee is not null");
				if (user.BoolForKey("logged") == false)
				{

					Debug.WriteLine("PLEASE LOG IN");

					user.SetBool(true, "logged");

					user.SetString(employee.Payload.UserId.ToString(), "userID");

					user.SetString(AccountInfo.Password, "password");

					AccountInfo.UserId = Guid.Parse(user.StringForKey("userID"));


					

				}
			}*/
			/*else {
				Debug.WriteLine("Employee is  null");
				user.SetBool(false, "logged");
				ViewModel.Logout();
					
			}*/

			//view.AddSubview(TableCompanyActivityTableView);

			//this.CompanyActivityTableView.BackgroundColor = PorpoiseColors.Turquoise;

			//this.View.AddSubview(view);



			//SetupActivitySource();

			//this.NavigationBarSetUp();

			

			this.CompanyActivityTableView.LayoutMargins = UIEdgeInsets.Zero;

            Custom.PorpoiseTableDelegate tableDelegate = new Custom.PorpoiseTableDelegate();

            this.CompanyActivityTableView.Delegate = tableDelegate;
          //  CompanyActivityTableView.Delegate = new Custom.PorpoiseTableDelegate();

			if (ViewModel.CompanyPosts.Count > 0)
			{
				this.CompanyActivityTableView.ContentInset = new UIEdgeInsets(-65, 0, 0, 0);
			}
			//this.UserActivityTableView.LayoutMargins = UIEdgeInsets.Zero;

			//this.UserActivityTableView.SeparatorInset = UIEdgeInsets.Zero;

			Debug.WriteLine("VIEW WIDTH " + this.View.Bounds.Width.ToString());

			//UserActivityTableView.Bounds = UIScreen.MainScreen.Bounds;

			//CompanyActivityTableView.Bounds = UIScreen.MainScreen.Bounds;

			//this.View.AutosizesSubviews = true;




			//UIView view = new UIView(this.View.Bounds);

			//view.AutoresizingMask = UIView.


			//View.BringSubviewToFront(Overlay);
			

			

			

			/*ViewModel.ForPropertyChange(x => x.ChangeWelldoneImage, y =>
			{

				Debug.WriteLine("ChangeWelldoneImage IS TRUE");

			});*/

			ViewModel.ForPropertyChange(x => x.IsDeleting, y =>
			{

				//SetupActivitySource();

				/*ViewModel.InFlight = true;

				this.CompanyActivityTableView.ReloadData();

				ViewModel.InFlight = false;*/

			});

            ViewModel.ForPropertyChange(x => x.DotActionPostId, y =>{

                Debug.WriteLine("Dot changed inside view controller");
                UIBlurEffect blurEffect = UIBlurEffect.FromStyle(UIBlurEffectStyle.Light);

                UIVisualEffectView beView = new UIVisualEffectView(blurEffect);

		
                beView.Frame = new CGRect(this.View.Bounds.X, this.View.Bounds.Y, this.View.Bounds.Width, this.View.Bounds.Height * 2);
                //this.View.InsertSubview(beView, 1);
                ReportPostAlertView dialog = new ReportPostAlertView();
                //dialog.View.Frame = this.View.Bounds;

                //dialog.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;

                TransitionViewController transitionView = new TransitionViewController();
                transitionView.ParentViewController = this;
                dialog.ParentViewController = transitionView;
				transitionView.View.Frame = this.View.Bounds;
				//transitionView.ParentViewController = this;
				transitionView.View.BackgroundColor = UIColor.Clear;
				transitionView.View.InsertSubview(beView, 0);
				transitionView.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;

                this.PresentViewController(transitionView,true, null);
                transitionView.presentController(dialog, false);
                //ViewModel.showCustomDialog();

            });

			
                    
                    

            

			ViewModel.ForPropertyChange(x => x.ChangedWelldones,  y =>
           {
               Debug.WriteLine("WELLDONES HAVE CHANGED " + ViewModel.PostPosition);

               if (y) { 
               var contentOffset = CompanyActivityTableView.ContentOffset;
                   //postsSource = ViewModel.CompanyPosts;
                   //var compSource = new ActivityTableSource(ViewModel.CompanyPosts, CompanyActivityTableView, this);
                   //CompanyActivityTableView.Source = compSource;
                   //CompanyActivityTableView.ReloadData();
                   //CompanyActivityTableView.SetContentOffset(contentOffset, false);

                   //CompanyActivityTableView.change = true;
                   //CompanyActivityTableView.controller = this;

                   //CompanyActivityTableView.posts = ViewModel.CompanyPosts;

                   ((ActivityTableSource)CompanyActivityTableView.Source).updateSource(ViewModel.CompanyPosts);

                    TableCompanyActivityTableView.ReloadData();

           }
			   //CompanyActivityTableView.ReloadData();
			   //postsSource = ViewModel.CompanyPosts;
			   //var compSource = new ActivityTableSource(postsSource, CompanyActivityTableView, this);

			   //NSIndexPath[] visible = CompanyActivityTableView.IndexPathsForVisibleRows;
			   //TODO: If this does not work change to  NSIndexPath indexPath = NSIndexPath.Create(0, ViewModel.PostPosition-1);
			   //NSIndexPath indexPath = NSIndexPath.Create(0, ViewModel.PostPosition);

			   /*

			  

			 
			   CompanyActivityTableView.Source = compSource;
             
                CompanyActivityTableView.ReloadData();
*/
			   //CompanyActivityTableView.ReloadRows(visible, UITableViewRowAnimation.None);
			   //Debug.WriteLine("INDEXPATH: "+indexPath.Section+"," + indexPath.Row);

			   //await ViewModel.LoadPosts();

			   //this.CompanyActivityTableView.ReloadData();

			   //CompanyActivityTableView.

			   //NSIndexPath indexPath = NSIndexPath.Create(0, 2);

			   //indexPath[1] = NSIndexPath.Create(2, 1);

			   //CompanyActivityTableView.ScrollToRow(indexPath, UITableViewScrollPosition.Top, false);



			   //CompanyActivityTableView.ScrollToRow(indexPath[1],UITableViewScrollPosition.Middle,true);
			   //this.SetupActivitySource();

			   //this.SetupActivitySource();

			   /*UITableViewCell cell = this.CompanyActivityTableView.CellAt(this.CompanyActivityTableView.IndexPathForSelectedRow);

			   if (cell != null) {

				   Debug.WriteLine("CELL IS NOT NULL");

			   }*/


		   });

			//ViewModel.ForPropertyChange(x => x.Po

			ViewModel.ForPropertyChange(x => x.IsDeleting, y =>
			{

				Debug.WriteLine("Is Deleting has changed");

				if (y == true)
				{

					this.showDeletePostAlert();

				}


			});


			ViewModel.ForPropertyChange(x => x.UserPosts, y =>
			{
				SetupActivitySource();
			});



			ViewModel.ForPropertyChange(x => x.CompanyPosts, y =>
			{
				SetupActivitySource();
			});

			/*ActivitySegmentedControl.ValueChanged += (sender, e) =>
			{

				View.BringSubviewToFront(Overlay);
				ViewModel.LoadPosts();
				SetupActivitySource();

				Debug.WriteLine(ViewModel.UserPosts.Count);

			};*/


			//this.CompanyActivityTableView.ReloadData();

			//this.CompanyActivityTableView.LayoutSubviews();
			CompanyActivityTableView.RowHeight = UITableView.AutomaticDimension;
			CompanyActivityTableView.EstimatedRowHeight = 40f;
			CompanyActivityTableView.ReloadData();
			//this.CompanyActivityTableView.ContentInset = new UIEdgeInsets(-65, 0, 0, 0);
			this.CompanyActivityTableView.RowHeight = UITableView.AutomaticDimension;

			this.CompanyActivityTableView.EstimatedRowHeight = 0;

            this.SetupActivitySource();

			this.CompanyActivityTableView.SetNeedsLayout();

			this.CompanyActivityTableView.LayoutIfNeeded();

			this.CompanyActivityTableView.LayoutSubviews();


            this.CompanyActivityTableView.Delegate = null;

            this.CompanyActivityTableView.Scrolled += (sender, e) => {

                Debug.WriteLine("Scrolled");

            };

		}



		public void NavigationBarSetUp()
		{
			if (this.NavigationController != null)
			{
				//TODO: figure out how to make the status bar opaque.


				this.NavigationController.NavigationBar.BarStyle = UIBarStyle.BlackOpaque;
				this.NavigationController.NavigationBar.SetBackgroundImage(new UIImage(), UIBarMetrics.Default);
				this.NavigationController.NavigationBar.ShadowImage = new UIImage();
				this.NavigationController.NavigationBar.BackgroundColor = PorpoiseColors.Turquoise;
			}



			NavigationController.NavigationBar.Translucent = false;
			float imageSize = 20f;

			float gap = 5f;

			float borderSize = 0f;

			float textHeight = 1f;

			float buttonWidth = 60;

			float buttonHeight = borderSize * 2 + gap * 3 + imageSize + textHeight;

			float imageOrigin = borderSize + gap;

			float textTop = imageOrigin + imageSize + gap;

			float textBottom = borderSize + gap;

			float imageBottom = textBottom + textHeight + gap;

			UIButton rigthButton = UIButton.FromType(UIButtonType.Custom);

			rigthButton.Center = this.View.Center;

			//Image

			UIImage logout = Services.PorpoiseImage.getFromURL("https://s3.amazonaws.com/porpoise-cdn/mobile-assets/logout%402x.png");

			rigthButton.Frame = new CGRect(0, 15, buttonWidth, buttonHeight+10);

			rigthButton.SetImage(logout, UIControlState.Normal);

			rigthButton.ImageEdgeInsets = new UIEdgeInsets(0, 15, 0, 10);

			rigthButton.ContentEdgeInsets = new UIEdgeInsets(0, 0, 15, 0);

			rigthButton.SetTitle(Resource.Logout, UIControlState.Normal);

			rigthButton.TitleEdgeInsets = new UIEdgeInsets(textTop, -logout.Size.Width, textBottom, 0.0f);

			rigthButton.TitleLabel.Font = UIFont.FromName("Ubuntu-Light", 15f);

			rigthButton.TouchUpInside += delegate
			{
				var user = NSUserDefaults.StandardUserDefaults;

				user.SetBool(true, "logged");

				ViewModel.Logout();

			};

			NavigationItem.RightBarButtonItem = new UIBarButtonItem(rigthButton);


			//NavigationItem.RightBarButtonItem.Title = Resource.Logout;

			//NavigationItem.RightBarButtonItem.Image = new UIImage("logout.png");

			UIImage post = new UIImage("logo.png");


			UIButton leftButton = UIButton.FromType(UIButtonType.Custom);

			leftButton.UserInteractionEnabled = false;

			leftButton.Bounds = new CGRect(0, 0, post.Size.Width, post.Size.Height);

			//leftButton.Frame = new CGRect(0, 0, 30, 30);

			leftButton.SetImage(post, UIControlState.Normal);

			leftButton.SetImage(post, UIControlState.Disabled);

			NavigationItem.LeftBarButtonItem = new UIBarButtonItem(leftButton);

			UILabel label = new UILabel();

			NavigationItem.LeftBarButtonItem.CustomView.Subviews.Append(label);


			NavigationItem.Title = "Porpoise";

		}

		Client.IPorpoiseWebApiClient client;

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);
			Debug.WriteLine("VIEW DID APPEAR");
			/*.SharedApplication.StatusBarHidden = false;

			UIApplication.SharedApplication.StatusBarStyle = UIStatusBarStyle.LightContent;*/



			//ActivitySegmentedControl.SelectedSegment = COMPANY_TAB;
			//UserActivityTableView.Hidden = true;
			CompanyActivityTableView.Hidden = true;
			//SetupActivitySource();

			ViewModel.InFlight = true;

			NSIndexPath path = NSIndexPath.FromRowSection(1, 0);



			//this.CompanyActivityTableView.ScrollToRow(path, UITableViewScrollPosition.Top, true);


			ViewModel.InFlight = false;

		}

		private List<HourLog> postsSource;

		public List<HourLog> PostsSource { 
		
			get {

				return postsSource;

			}

			set {

				postsSource = value;
			
			}
		
		}

		//Load posts
		public void SetupActivitySource()
		{

			//ViewModel.InFlight = true;

			//UserActivityTableView.Source = null;

			postsSource = new List<HourLog>();

			/*switch (ActivitySegmentedControl.SelectedSegment)
			{*/

			/*case USER_TAB:
				postsSource = ViewModel.UserPosts;
				var userSource = new ActivityTableSource(postSource, UserActivityTableView, this);
				UserActivityTableView.Source = userSource;
				//UserActivityTableView.SeparatorColor = UIColor.White;
				UserActivityTableView.Hidden = false;
				CompanyActivityTableView.Hidden = true;

				this.CurrentNumberOfPosts = ViewModel.UserPosts.Count;

				break;*/

			//	case COMPANY_TAB:
			postsSource = ViewModel.CompanyPosts;

					var compSource = new ActivityTableSource(ViewModel.CompanyPosts, CompanyActivityTableView, this);
					CompanyActivityTableView.Source = compSource;
					//CompanyActivityTableView.SeparatorColor = UIColor.White;
					//UserActivityTableView.Hidden = true;
					CompanyActivityTableView.Hidden = false;
			/*CompanyActivityTableView.EstimatedRowHeight = 560f;
			        CompanyActivityTableView.RowHeight = 560f;*/
					//CompanyActivityTableView.SetNeedsLayout();
					//CompanyActivityTableView.LayoutIfNeeded();
					this.CurrentNumberOfPosts = ViewModel.CompanyPosts.Count;
					CompanyActivityTableView.SetNeedsLayout();
					CompanyActivityTableView.LayoutIfNeeded();
					this.CompanyActivityTableView.ReloadData();

			this.CompanyActivityTableView.ContentInset = new UIEdgeInsets(0, 0, 0, 0);
			//break;
			//}

		
			//ViewModel.InFlight = false;

			//this.CompanyActivityTableView.ReloadData();
		}



        public PorpoiseTableView TableCompanyActivityTableView {

			get{

				return this.CompanyActivityTableView;

			}set {

				this.CompanyActivityTableView = value;
			
			}
		
		}


		//Alert displayed when deleting post
		public void showDeletePostAlert()
		{

			/*var alert = UIAlertController.Create("DeletePost", "Are you sure you want to delete this post", UIAlertControllerStyle.Alert);

			alert.AddAction(UIAlertAction.Create("Yes", UIAlertActionStyle.Default, x =>
			{

				this.deletePost(id);



			}));

			alert.AddAction(UIAlertAction.Create("No", UIAlertActionStyle.Cancel, null));*/


			// Create a new Alert Controller
			UIAlertController actionSheetAlert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);

			// Add Actions


			actionSheetAlert.AddAction(UIAlertAction.Create("Edit Post", UIAlertActionStyle.Default, async (action) =>
			{

				await ViewModel.EditPost();

			}));

			actionSheetAlert.AddAction(UIAlertAction.Create("Delete Post", UIAlertActionStyle.Default, async (action) =>
			{

				ShowDeleteAlert();

			}));

			/*actionSheetAlert.AddAction(UIKit.UIAlertAction.Create("Well Done!", UIKit.UIAlertActionStyle.Default, (action) =>
			{

				Debug.WriteLine("Well Done!");

			}));*/


			actionSheetAlert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, (action) => Console.WriteLine("Cancel button pressed.")));

			// Required for iPad - You must specify a source for the Action Sheet since it is
			// displayed as a popover
			UIPopoverPresentationController presentationPopover = actionSheetAlert.PopoverPresentationController;
			if (presentationPopover != null)
			{
				presentationPopover.SourceView = this.View;
				presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Up;
			}

			// Display the alert
			this.PresentViewController(actionSheetAlert, true, null);

		}

		public void ShowDeleteAlert()
		{

			UIAlertController actionSheetAlert = UIAlertController.Create("Are you sure you want to delete this post?", null, UIAlertControllerStyle.ActionSheet);

			// Add Actions


			/*actionSheetAlert.AddAction(UIAlertAction.Create("Are you sure you want to delete this post?", UIAlertActionStyle.Default, async (action) =>
			{

				await ViewModel.EditPost();

			}));*/

			actionSheetAlert.AddAction(UIAlertAction.Create("Yes", UIAlertActionStyle.Default, async (action) =>
			{

				await ViewModel.DeletePost();

			}));

			/*actionSheetAlert.AddAction(UIKit.UIAlertAction.Create("Well Done!", UIKit.UIAlertActionStyle.Default, (action) =>
			{

				Debug.WriteLine("Well Done!");

			}));*/


			actionSheetAlert.AddAction(UIAlertAction.Create("No", UIAlertActionStyle.Default, (action) =>
			{
				Console.WriteLine("Cancel button pressed.");
			}));

			// Required for iPad - You must specify a source for the Action Sheet since it is
			// displayed as a popover
			UIPopoverPresentationController presentationPopover = actionSheetAlert.PopoverPresentationController;
			if (presentationPopover != null)
			{
				presentationPopover.SourceView = this.View;
				presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Any;
			}


			//
			this.PresentViewController(actionSheetAlert, true, null);

		}


		/*private async void deletePost(Guid id) {

			try
			{

				//await ViewModel.DeletePost(id);

			}
			catch (Exception ex) {

				Console.WriteLine(ex);
			
			}
		
		}*/



		/*public void Delete() {

			showDeletePostAlert();
		
		}*/

		private void styleComponents(){

            this.OverlayImage.Image = Services.PorpoiseImage.getFromURL("https://s3.amazonaws.com/porpoise-cdn/mobile-assets/activityfeedbackground.png");

            foreach (NSLayoutConstraint constraint in this.CompanyActivityTableView.Constraints)
			{
				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.View.Bounds.Width;

				}
				if (constraint.Description.Contains("height"))
				{
					constraint.Constant = this.View.Bounds.Height;

				}

			}
            this.Overlay.Frame = this.View.Bounds;
			this.OverlayImage.Frame = this.View.Bounds;

			foreach (NSLayoutConstraint constraint in this.Overlay.Constraints)
			{
				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.View.Bounds.Width;

				}
				if (constraint.Description.Contains("height"))
				{
					constraint.Constant = this.View.Bounds.Height;

				}

			}

			foreach (NSLayoutConstraint constraint in this.OverlayImage.Constraints)
			{
				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.View.Bounds.Width;

				}
				if (constraint.Description.Contains("height"))
				{
					constraint.Constant = this.View.Bounds.Height;

				}

			}

		}

        private void createSegue(){



        }

	}

	public class ActivityTableSource : MvxTableViewSource
	{

		bool isEmpty;
		bool isCompany;
		bool noPhoto;

		private nfloat highlightWidth;

		private nfloat postDescriptionWidth;

		private nfloat companyWidth;

		bool resize = false;
		int numberLinesIncrease = 0;
		PostItemCellController auxiliarCell = null;

		private nfloat heightIncrement = 0;

		public event EventHandler<RowSelectedEventArgs> IsRowSelected;
		private ActivityViewController activityController;
		private ProfileViewController profileController;
		private UIFont hightlightFont = null;
		private UIFont postFont = null;
		private UIFont companyFont = null;
		private UIFont noPhotoPostFont = null;
		private UIFont noPhotoPostDetailsFont = null;
		private string noPhotoPostDetails = "";
		private bool hidden;
		private nfloat reduce = 0;

		const string COMPANY = "company";
		const string USER = "user";
		const string YOUTUBE = "youtube";
		public List<HourLog> Posts { get; set; }
		private static readonly NSString NoPhotoPostCellIdentifier = new NSString("NoPhotoPost");
		private static readonly NSString PostCellIdentifier = new NSString("PostItemCellController");
		private static readonly NSString EmptyPostCellIdentifier = new NSString("EmptyPostItemCellController");
		private static readonly NSString CompanyCellIdentifier = new NSString("CompanyPostItemCellController");

		float additionalSpaceNoPhoto = 0;

        public void updateSource(List<HourLog>list){


            Debug.WriteLine("UPDATING SOURCE");

            //this.Posts.Clear();

            for (int i = 0; i < this.Posts.Count; i++)
            {

                this.Posts[i].WellDones = list[i].WellDones;

            }

            //this.ReloadTableData();

        }


        public ActivityTableSource(UITableView tableView) : base(tableView)
		{
			this.Posts = new List<HourLog>();

		}

		//this method updates the table
		private void updateTable()
		{
			TableView.ReloadData();

		}

		public ActivityTableSource(List<HourLog> posts, UITableView tableView, ActivityViewController activityController = null, ProfileViewController profileController = null) : base(tableView)
		{
			if (activityController != null)
			{
				this.activityController = activityController;
			}
			else if (profileController != null)
			{
				this.profileController = profileController;
			}

			this.Posts = new List<HourLog>();

			Debug.WriteLine("POSTS SIZE "+posts.Count);


			if (posts != null && posts.Count > 0 && posts.All(x => x != null))
			{
				//activityController.ViewModel.InFlight = false;
				isEmpty = false;
				tableView.RegisterNibForCellReuse(UINib.FromName("CompanyPostItemCellController", NSBundle.MainBundle), CompanyCellIdentifier);
				tableView.RegisterNibForCellReuse(UINib.FromName("PostItemCellController", NSBundle.MainBundle), PostCellIdentifier);
				tableView.RegisterNibForCellReuse(UINib.FromName("NoPhotoPost", NSBundle.MainBundle), NoPhotoPostCellIdentifier);

				this.Posts = posts;
				ItemsSource = this.Posts.Where(x => !string.IsNullOrEmpty(x.PhotoUrl));
				this.TableView.RowHeight = UITableView.AutomaticDimension;
				this.TableView.EstimatedRowHeight = 550f;
				tableView.SeparatorColor = UIColor.White;
				tableView.SeparatorInset = UIEdgeInsets.FromString("{1,0,0,1}");

			}

			else {

				//activityController.ViewModel.InFlight = true;
			
			}
			/*else
			{
				//isEmpty = true;
				//tableView.RegisterNibForCellReuse(UINib.FromName("EmptyPostItemCellController", NSBundle.MainBundle), EmptyPostCellIdentifier);
				//need to assign a list with at least 1 item so that the GetOrCreateCellFor() gets called and the EmptyPostItemCellController is built
				ItemsSource = new List<string>{
						PorpoiseMobileApp.Resource.NoPostToDisplayMessage
					};
				tableView.SeparatorInset = UIEdgeInsets.Zero;
			}*/

			//TableView.ReloadData();
		}




		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			base.RowSelected(tableView, indexPath);
			var post = this.Posts[indexPath.Row];
			Debug.WriteLine("SCROLLING DOWN POSTS");

			if (activityController != null || profileController != null)
			{
				/*UIAlertController highlightDialog = BuildHighlightDialog(post);
				if (activityController != null && profileController == null)
				{
					activityController.PresentViewController(highlightDialog, true, null);
				}
				else if (profileController != null && activityController == null)
				{
					profileController.PresentViewController(highlightDialog, true, null);
				}*/
			}


			if (IsRowSelected != null)
			{
				var args = new RowSelectedEventArgs(tableView, indexPath);
				IsRowSelected(this, args);
			};

			tableView.DeselectRow(indexPath, false);

		}

		static UIAlertController BuildHighlightDialog(HourLog post)
		{
			var dialogTitle = !string.IsNullOrEmpty(post.EmployeeName) ? "{post.EmployeeName}'s Highlight" : string.Empty;
			UIAlertController highlightDialog = UIAlertController.Create(dialogTitle, post.Highlight, UIAlertControllerStyle.Alert);
			var action = UIAlertAction.Create(Resource.Ok, UIAlertActionStyle.Default, x => { });
			highlightDialog.AddAction(action);
			return highlightDialog;
		}


		/*public override nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath)
		{
			if (isEmpty)
			{
				return 94f;
			}

			if (isCompany)
			{
				Debug.WriteLine("RETURNING COMPANY CELL SIZE");

				return 406f;
			}

			return 560f;

		}*/




		public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath)
		{

			if (isEmpty)
			{
				return 94f;
			}



			if (isCompany)
			{
				HourLog post = this.Posts.ElementAt(indexPath.Row);

				UIFont labelFont = UIFont.FromName("Avenir LT 45 Book", 12);

				if (companyFont != null)
				{
					return 405f + this.heightForLabel(this.companyFont, (float)this.companyWidth, post.Highlight);

				}

				else {

					return 405f;
				
				}
				
				}


			if (noPhoto) {

				Debug.WriteLine("NO PHOTO ROW");

				HourLog post = this.Posts.ElementAt(indexPath.Row);
				//Specify width label;//248 Post details width
				return 208f + (this.heightForLabel(this.noPhotoPostFont, (float)352, post.Highlight)) + (this.heightForLabel(this.noPhotoPostDetailsFont, (float)248, noPhotoPostDetails));
			
			}
			//UITableViewCell cell = tableView.CellAt(indexPath);

			//Debug.WriteLine("INDEXPATH: " + indexPath.Row.ToString());

			try
			{



				if (indexPath != null)
				{

					if(this.Posts.ElementAt(indexPath.Row) != null)
					{
						HourLog post = this.Posts.ElementAt(indexPath.Row);


					if (post != null)
					{

						UILabel postDetails = new UILabel();

							UIFont font = UIFont.FromName("Ubuntu-Bold", 12);

						UIFont labelFont = UIFont.FromName("Avenir LT 45 Book", 11);

							string details = post.NumberOfHours.ToString().ToUpper() + " HOURS TOWARDS " + post.GoalName.ToUpper() + " WITH " + post.OrganisationName.ToUpper()+".!";

							if (!hidden)
							{

								return 494f + this.heightForLabel(this.hightlightFont, (float)this.highlightWidth, post.Highlight) + this.heightForLabel(this.postFont, (float)this.postDescriptionWidth, details) - 14 - 16;
							}
							else { 
							
								//return 502f + this.heightForLabel(this.hightlightFont, (float)this.highlightWidth, post.Highlight) + this.heightForLabel(this.postFont, (float)this.postDescriptionWidth, details) - 14 - 16 - (32-8);
                                return 494f + this.heightForLabel(this.hightlightFont, (float)this.highlightWidth, post.Highlight) + this.heightForLabel(this.postFont, (float)this.postDescriptionWidth, details) - 14 - 16;


							}
					}

				}

			}
			}
			catch (Exception ex) { 
			
			return 494f;
			
			}

			//testCell.PostDetails.Frame = new CGRect(testCell.PostDetails.Frame.X, testCell.PostDetails.Frame.Y, testCell.PostDetails.Frame.Width, this.numberLinesLabel(testCell.PostDetails));

			return 494f;
		}


		/*public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{

			Debug.WriteLine("GETTING CELL INSIDE GET CELL METHOD");

			UITableViewCell cell = base.GetCell(tableView, indexPath);

			//cell.Frame = new CGRect(cell.Bounds.X, cell.Bounds.Y, cell.Bounds.Width, 523f);

			return cell;


		}*/


		private nfloat heightForLabel(UIFont font, float width, string text) {

			UILabel label = new UILabel();

			label.Frame = new CGRect(0, 0, width, float.MaxValue);

			label.Lines = 0;

			label.LineBreakMode = UILineBreakMode.WordWrap;

			label.Font = font;

			label.Text = text;

			label.SizeToFit();



			return label.Frame.Height;
		
		}


		protected override UITableViewCell GetOrCreateCellFor(UITableView tableView, NSIndexPath indexPath, object item)
		{
			this.numberLinesIncrease = 0;

			resize = false;


			this.auxiliarCell = null;

			if (isEmpty)
			{
				var emptyCell = (EmptyPostItemCellController)tableView.DequeueReusableCell(EmptyPostCellIdentifier, indexPath);

				//tableView.RowHeight=491f;	

				tableView.RowHeight = 94f;

				isCompany = false;

				emptyCell.LayoutIfNeeded();

				this.AwakeFromNib();
				//return null;
				return emptyCell;
			}


			var post = (HourLog)item;



			if (post.MediaType.Equals("none"))
			{

				var noPhotoPostCell = (NoPhotoPost)tableView.DequeueReusableCell(NoPhotoPostCellIdentifier, indexPath);
                if (post != null && string.IsNullOrEmpty(post.EmployeeName))
                {
                    noPhotoPostCell.isCompany();
                }
				this.noPhotoPostFont = noPhotoPostCell.noPostLabel.Font;

				this.noPhotoPostDetailsFont = noPhotoPostCell.PostDetails.Font;

				this.noPhotoPostDetails = noPhotoPostCell.PostDetails.Text;

				noPhoto = true;


				tableView.EstimatedRowHeight = 208f;

				isCompany = false;

				noPhotoPostCell.LayoutIfNeeded();

				this.AwakeFromNib();

				noPhotoPostCell.SizeToFit();

				foreach(NSLayoutConstraint constraint in noPhotoPostCell.noPostView.Constraints){

					if (constraint.Description.Contains("width"))
					{
						constraint.Constant = this.TableView.Bounds.Width;

					}


				}

				foreach (NSLayoutConstraint constraint in noPhotoPostCell.Line.Constraints)
				{

					if (constraint.Description.Contains("width"))
					{
						constraint.Constant = this.TableView.Bounds.Width;

					}


				}

                //CHECK IF IT A COMPANY POST

                /*if (post != null && string.IsNullOrEmpty(post.EmployeeName))
                {

                    noPhotoPostCell.Employeename.Text = post.CompanyName;

                    noPhotoPostCell.Employeename.TextColor = PorpoiseColors.Orange;

				  noPhotoPostCell.CompanyNameLocation.RemoveFromSuperview();

                    noPhotoPostCell.Employeename.RemoveConstraints(noPhotoPostCell.Employeename.Constraints);

                   
                    var heightConstraint = NSLayoutConstraint.Create(noPhotoPostCell.Employeename, NSLayoutAttribute.Height, NSLayoutRelation.Equal, 1, 13);

                    var widthConstraint = NSLayoutConstraint.Create(noPhotoPostCell.Employeename, NSLayoutAttribute.Width, NSLayoutRelation.Equal, 1, 247);

                  
                    noPhotoPostCell.AddConstraint(heightConstraint);

                    noPhotoPostCell.AddConstraint(widthConstraint);

                    foreach(NSLayoutConstraint constraint in noPhotoPostCell.ProfileImage.Constraints){

                        Debug.WriteLine("COMPNAY POST NO PHOTO "+constraint.Constant+" - "+constraint.Description);

                    }

                    noPhotoPostCell.ProfileImage.Frame = new CGRect(noPhotoPostCell.ProfileImage.Bounds.X, noPhotoPostCell.ProfileImage.Bounds.Y, 44f, 44f);

				}*/


				return noPhotoPostCell;

			}


			//if employeeName is null, its a company post
			if (post != null && string.IsNullOrEmpty(post.EmployeeName))
			{
				isCompany = true;

				CompanyPostItemCellController companycell = (CompanyPostItemCellController)tableView.DequeueReusableCell(CompanyCellIdentifier, indexPath);

				companyFont = companycell.getPostDetails.Font;

				this.companyWidth = companycell.getPostDetails.Bounds.Width;

				companycell.Accessory = UITableViewCellAccessory.None;
				if (post.PostType == "company" && post.MediaType == "youtube")
				{
					companycell.PlayIcon.Hidden = false;
					companycell.BringSubviewToFront(companycell.PlayIcon);
				}
				else
				{
					companycell.PlayIcon.Hidden = true;
				}



				this.TableView.RowHeight = UITableView.AutomaticDimension;

				this.TableView.EstimatedRowHeight = 494f;

				// set to whatever your "average" cell height is
													 //tableView.EstimatedRowHeight = 120f;
													 //tableView.RowHeight = 120f;
													 //tableView.SetNeebdsLayout();
													 //tableView.LayoutIfNeeded();

				//Provide the url
				companycell.ProfileImageHelper = post.CompanyLogo;

				//Debug.WriteLine("IMAGE VALUE "+ph);

				if (post.CompanyLogo == null)
				{

					//companycell.ProfileImage.Image = new UIImage("noImage.png");

				}

				//cell.ProfileImage.Layer.BorderWidth = 1;
				//cell.ProfileImage.Layer.MasksToBounds = false;
				//cell.Layer.BorderColor = UIColor.White.CGColor;
				//REmovecompanycell.ProfileImage.Layer.CornerRadius = companycell.ProfileImage.Frame.Height / 2;
				//Removecompanycell.ProfileImage.ClipsToBounds = true;

				//companycell.Frame = new CGRect(companycell.Bounds.X, companycell.Bounds.Y, companycell.Bounds.Width, 406f);

				//tableView.ReloadData();

				/*this.AwakeFromNib();

				companycell.LayoutIfNeeded();

				companycell.LayoutSubviews();

				companycell.SetNeedsLayout();*/

				return companycell;
			}



			//tableView.RowHeight = 550f;
			//tableView.EstimatedRowHeight = 550f;

			PostItemCellController cell = (PostItemCellController)tableView.DequeueReusableCell(PostCellIdentifier, indexPath);

			if (cell.WellDoneButton is WelldoneButton) {

				WelldoneButton button = (WelldoneButton)cell.WellDoneButton;
				if (this.activityController != null)
				{
					button.ViewModel = this.activityController.ViewModel;
				}
				//button.ViewModel = this.profileController.ViewModel;

			}

			//cell.SizeToFit();

			//Show given well dones

			//cell.Frame = new CGRect(cell.Bounds.X,cell.Bounds.Y, cell.Highlight.Bounds.Width,cell.Highlight.Bounds.Height+this.heightIncrement);

			//Debug.WriteLine("NUMBER OF LINES VALUE: " + this.numberLines(cell.Highlight));



			/*foreach (NSLayoutConstraint constraint in cell.DateLabel.Constraints)
			{

				Debug.WriteLine("DATE CONSTRAINT " + constraint.GetIdentifier() + "-" + constraint.Constant);

			

			}*/

			//tableView.RowHeight = 560f;

			//tableView.EstimatedRowHeight = 560f;

			if (AccountInfo.UserId.ToString() == post.PosterId)
			{
				//cell.WellDoneButton.Hidden = true;

				//Debug.WriteLine("HIDING WELL DONE BUTTON");

			}
			else
			{
				

				//Debug.WriteLine("POST NAME " + post.EmployeeName + " SIZE 520");

				//cell.WellDoneButton.SetBackgroundImage(new UIImage("wellDoneOrange.png"), UIControlState.Normal);

				//Debug.WriteLine("Well dones size " + post.WellDones.Length);

				//Debug.WriteLine("Creator Logo " + post.WellDones[0].CreatorLogo);

				//Debug.WriteLine("Creator Name " + post.WellDones[0].CreatorName);

				//Debug.WriteLine("WELL Done user Id: " + post.WellDones[0].UserId);

		


			}

			//cell.SeparatorInset = UIEdgeInsets.Zero;
			//cell.separatorInset = UIEdgeInsetsZero
			//cell.LayoutMargins = UIEdgeInsets.Zero;

			Debug.WriteLine("HIGHLIGHT HEIGHT IN CELL: "+cell.Highlight.Bounds.Height);

			Debug.WriteLine("CELL HIGHLIGHT: " + cell.Highlight.Text);

			Debug.WriteLine(indexPath.ToString());

			if (cell.GivenWelldoneText.Hidden)
			{

				cell.GivenWelldone.RemoveFromSuperview();

				cell.GivenWelldoneText.RemoveFromSuperview();

			}
			else {

				hidden = false;
			
			}
			if (cell.highlightConstraint().Constant == 8)
			{

				this.reduce = 23;

			}
			else { 
			
				this.reduce = 0;
			
			}

			this.hightlightFont = cell.Highlight.Font;

			this.postFont = cell.PostDetails.Font;

			this.postDescriptionWidth = cell.PostDetails.Bounds.Width;

			this.highlightWidth = cell.Highlight.Bounds.Width;



			isCompany = false;
			noPhoto = false;
			//tableView.RowHeight = UITableView.AutomaticDimension;
			//cell.SeparatorInset = UIEdgeInsets.Zero;
			//cell.LayoutMargins = UIEdgeInsets.Zero;

			//var avm;


			//POST HAS NO PHOTO
			/*if (post.MediaType.Equals("none"))
			{

				cell.GetUploadedImage.RemoveFromSuperview();

				cell.Highlight.RemoveFromSuperview();



				//int color =int.Parse("0x" + post.BackgroundColor.Replace("#",""));
				string color = post.BackgroundColor.Replace("#","");

				int intColor = Convert.ToInt32(color, 16);

				Debug.WriteLine("COLOR: "+intColor);

				cell.noPostView.BackgroundColor = PorpoiseColors.FromHex(intColor);



				cell.noPostView.Hidden = false;

				cell.noPostLabel.Hidden = false;

			}*/

		
			//cell.Frame = new CGRect(cell.Bounds.X, cell.Bounds.Y, cell.Highlight.Bounds.Width, 900);

			cell.LayoutMargins = UIEdgeInsets.Zero;

			//cell.Frame.Size.Height = 491f;


			//this.AwakeFromNib();

			//cell.SetNeedsUpdateConstraints();

			//cell.UpdateConstraints();

			//cell.LayoutIfNeeded();

			//cell.Highlight.SizeToFit();

			//cell.UpdateFocusIfNeeded();

			//cell.LayoutSubviews();

			//cell.SetNeedsLayout();

			//cell.SizeToFit();

			foreach (NSLayoutConstraint constraint in cell.Line.Constraints)
			{

				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.TableView.Bounds.Width;

				}


			}

			return cell;

		}

		private nfloat HeightForText(UITextView textView) {

			return textView.Frame.Size.Height;
		
		}

		private void printNumberLinesText(UILabel label)
		{
			UIFont attributes = label.Font;
		}

		private nfloat numberLinesLabel(UILabel label) { 
		

			CGSize maximumSize = new CGSize(label.Frame.Width, float.MaxValue);

			NSString text = new NSString(label.Text);

			UIFont font = label.Font;

			NSAttributedString attributedText = new NSAttributedString(text, font);

			CGRect rect = attributedText.GetBoundingRect(maximumSize, NSStringDrawingOptions.UsesLineFragmentOrigin, null);

			//CGSize stringSize = new CGSize(text.StringSize(font));

			/*foreach (NSLayoutConstraint constraint in label.Constraints) {

				Debug.WriteLine(constraint.GetIdentifier()+" : "+constraint.Constant);

				constraint.Constant = rect.Height;

				//this.Frame = new CGRect(this.Frame.X, this.Frame.Y, this.Frame.Width, (this.Frame.Height+ (this.lable)));
					
			
			}*/

			//this.Frame = new CGRect(this.Frame.X, this.Frame.Y, this.Frame.Width, (this.Frame.Height + (rect.Height - label.Frame.Height)));

			//label.Frame = new CGRect(label.Frame.X, label.Frame.Y, label.Frame.Width, rect.Height);

			//this.Frame = new CGRect(this.Frame.X, this.Frame.Y, this.Frame.Width, 600f);

			/*NSLayoutConstraint lineConstraint = NSLayoutConstraint.Create(highligth, NSLayoutAttribute.Bottom, NSLayoutRelation.LessThanOrEqual, Date, NSLayoutAttribute.Top, 1, -15);

			this.AddConstraint(lineConstraint);*/

			label.PreferredMaxLayoutWidth = rect.Width;

			//this.UpdateConstraints();

			//this.SetNeedsDisplay();

			return rect.Height;
		
		}

		private nfloat numberLines(UITextView label)
		{

			CGSize maximumSize = new CGSize(label.Frame.Width, float.MaxValue);

			NSString text = new NSString(label.Text);

			UIFont font = label.Font;

			NSAttributedString attributedText = new NSAttributedString(text, font);

			CGRect rect = attributedText.GetBoundingRect(maximumSize, NSStringDrawingOptions.UsesLineFragmentOrigin, null);

			//CGSize stringSize = new CGSize(text.StringSize(font));

			/*foreach (NSLayoutConstraint constraint in label.Constraints) {

				Debug.WriteLine(constraint.GetIdentifier()+" : "+constraint.Constant);

				constraint.Constant = rect.Height;

				//this.Frame = new CGRect(this.Frame.X, this.Frame.Y, this.Frame.Width, (this.Frame.Height+ (this.lable)));
					
			
			}*/

			//this.Frame = new CGRect(this.Frame.X, this.Frame.Y, this.Frame.Width, (this.Frame.Height + (rect.Height - label.Frame.Height)));

			//label.Frame = new CGRect(label.Frame.X, label.Frame.Y, label.Frame.Width, rect.Height);

			//this.Frame = new CGRect(this.Frame.X, this.Frame.Y, this.Frame.Width, 600f);

			/*NSLayoutConstraint lineConstraint = NSLayoutConstraint.Create(highligth, NSLayoutAttribute.Bottom, NSLayoutRelation.LessThanOrEqual, Date, NSLayoutAttribute.Top, 1, -15);

			this.AddConstraint(lineConstraint);*/

			//label.PreferredMaxLayoutWidth = rect.Width;

			//this.UpdateConstraints();

			//this.SetNeedsDisplay();

			//Debug.WriteLine("RECOMMENDED HEIGHT " + rect.Height + " FOR: " + label.Text);

			return rect.Height;

		}



	}


	public class RowSelectedEventArgs : EventArgs
	{
		public RowSelectedEventArgs(UITableView tableView, NSIndexPath indexPath)
		{
			this.IndexPath = indexPath;
			this.TableView = tableView;

			Debug.WriteLine("ROW SELECTED");
		}
		public UITableView TableView
		{
			get;
			set;
		}
		public NSIndexPath IndexPath
		{
			get;
			set;
		}
	}
}